{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "AutoPlayCarousel",
  "type": "registry:block",
  "registryDependencies": ["carousel", "button", "use-mobile"],
  "dependencies": ["embla-carousel-autoplay"],
  "files": [
    {
      "path": "components/ngr-ui/AutoPlayCarousel.tsx",
      "type": "registry:component",
      "content": "\"use client\";\r\n\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\n\r\nimport Autoplay from \"embla-carousel-autoplay\";\r\n\r\nimport { useIsMobile } from \"@\/hooks\/use-mobile\";\r\n\r\nimport { Button } from \"@\/components\/ui\/button\";\r\nimport type { CarouselApi } from \"@\/components\/ui\/carousel\";\r\nimport {\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselNext,\r\n  CarouselPrevious,\r\n  type CarouselProps, \/\/ just find CarouselProps inside carousel and export it\r\n} from \"@\/components\/ui\/carousel\";\r\n\r\ntype SlideStyle = { scale: number; opacity: number; translateX: number };\r\n\r\nfunction getSlideStyles(api: CarouselApi, isMobile: boolean): SlideStyle[] {\r\n  if (!api) return [];\r\n  const slides = api.slideNodes();\r\n  const scrollProgress = api.scrollProgress();\r\n  const scrollSnaps = api.scrollSnapList();\r\n\r\n  return slides.map((_, index) => {\r\n    const slideSnapPosition = scrollSnaps[index];\r\n    let diff = slideSnapPosition - scrollProgress;\r\n    if (diff > 0.5) diff -= 1;\r\n    else if (diff < -0.5) diff += 1;\r\n    const centerDistance = Math.abs(diff);\r\n    const clampedDistance = Math.min(centerDistance, 0.5);\r\n    const scale = 1 - clampedDistance * (isMobile ? 0.7 : 0.8);\r\n    const opacity = 1 - clampedDistance * 0.8;\r\n    const translateX = -diff * (isMobile ? 70 : 350);\r\n    return { scale, opacity, translateX };\r\n  });\r\n}\r\n\r\nexport interface AutoPlayCarouselProps<T>\r\n  extends CarouselProps,\r\n    React.ComponentProps<\"div\"> {\r\n  slides: T[];\r\n  renderSlide: ({ slide }: { slide: T }) => React.ReactNode;\r\n  showIndicator?: boolean;\r\n  showController?: boolean;\r\n  opts?: CarouselProps[\"opts\"];\r\n  autoplayDelay?: number;\r\n}\r\n\r\nexport default function AutoPlayCarousel<T>({\r\n  slides,\r\n  renderSlide,\r\n  showIndicator = false,\r\n  showController = false,\r\n  opts = {},\r\n  autoplayDelay = 4000,\r\n  className,\r\n  ...props\r\n}: AutoPlayCarouselProps<T>) {\r\n  const [api, setApi] = useState<CarouselApi>();\r\n  const [current, setCurrent] = useState(0);\r\n  const [slideStyles, setSlideStyles] = useState<SlideStyle[]>([]);\r\n  const isMobile = useIsMobile();\r\n\r\n  const updateSlideStyles = useCallback(() => {\r\n    if (api) setSlideStyles(getSlideStyles(api, isMobile));\r\n  }, [api, isMobile]);\r\n\r\n  useEffect(() => {\r\n    if (!api) return;\r\n    updateSlideStyles();\r\n    setCurrent(api.selectedScrollSnap());\r\n    const handleSelect = () => {\r\n      setCurrent(api.selectedScrollSnap());\r\n      updateSlideStyles();\r\n    };\r\n    api.on(\"select\", handleSelect);\r\n    api.on(\"scroll\", updateSlideStyles);\r\n    return () => {\r\n      api.off(\"select\", handleSelect);\r\n      api.off(\"scroll\", updateSlideStyles);\r\n    };\r\n  }, [api, updateSlideStyles]);\r\n\r\n  const handleDotClick = useCallback(\r\n    (index: number) => api?.scrollTo(index),\r\n    [api]\r\n  );\r\n\r\n  const plugin = useRef(\r\n    Autoplay({ delay: autoplayDelay, stopOnInteraction: true })\r\n  );\r\n\r\n  return (\r\n    <Carousel\r\n      setApi={setApi}\r\n      plugins={[plugin.current]}\r\n      className={className}\r\n      opts={{ align: \"center\", loop: true, ...opts }}\r\n      onMouseEnter={plugin.current.stop}\r\n      onMouseLeave={plugin.current.reset}\r\n      {...props}\r\n    >\r\n      <CarouselContent>\r\n        {slides.map((slide, index) => {\r\n          const style = slideStyles[index] || {\r\n            scale: 0.9,\r\n            opacity: 0.6,\r\n            translateX: 0,\r\n          };\r\n          return (\r\n            <CarouselItem\r\n              key={index}\r\n              className=\"basis-5\/6 max-md:pl-8 max-sm:pl-6 max-[35rem]:pl-2 max-h-[80dvh]\"\r\n            >\r\n              <div\r\n                className=\"group relative size-full aspect-square  overflow-hidden rounded-lg duration-200 md:aspect-video\"\r\n                style={{\r\n                  transform: `scale(${style.scale}) translateX(${style.translateX}px)`,\r\n                }}\r\n              >\r\n                {renderSlide({ slide })}\r\n              <\/div>\r\n            <\/CarouselItem>\r\n          );\r\n        })}\r\n      <\/CarouselContent>\r\n      {showController && (\r\n        <>\r\n          <CarouselPrevious className=\"top-[95%] hover:scale-110 active:scale-95 left-6\" \/>\r\n          <CarouselNext className=\"top-[95%] right-6 hover:scale-110 active:scale-95\" \/>\r\n        <\/>\r\n      )}\r\n      {showIndicator && (\r\n        <div className=\"mt-8 flex justify-center gap-2\">\r\n          {slides.map((_, index) => (\r\n            <Button\r\n              key={index}\r\n              variant=\"ghost\"\r\n              size=\"icon\"\r\n              className={`size-3 rounded-full p-0 ${\r\n                index === current\r\n                  ? \"bg-primary ring-ring ring-offset-background hover:bg-primary\/80 ring-1 ring-offset-2 transition-all duration-300 hover:scale-105\"\r\n                  : \"bg-primary\/10 hover:bg-primary\/15\"\r\n              }`}\r\n              onClick={() => handleDotClick(index)}\r\n              aria-label={`Go to slide ${index + 1}`}\r\n            \/>\r\n          ))}\r\n        <\/div>\r\n      )}\r\n    <\/Carousel>\r\n  );\r\n}\r\n"
    },
    {
      "type": "registry:component",
      "path": "components/AutoPlayCarouselWrapper.tsx"
      ,"content": "\"use client\";\r\n\r\nimport { AutoPlayCarouselProps } from \"@\/components\/ngr-ui\/AutoPlayCarousel\";\r\nimport dynamic from \"next\/dynamic\";\r\n\r\nconst sliders = [\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/733745\/pexels-photo-733745.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/9334965\/pexels-photo-9334965.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/18003063\/pexels-photo-18003063.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/29067154\/pexels-photo-29067154.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/13971738\/pexels-photo-13971738.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n  {\r\n    src: \"https:\/\/images.pexels.com\/photos\/8664310\/pexels-photo-8664310.jpeg\",\r\n    alt: \"lorem\",\r\n  },\r\n];\r\n\r\nconst AutoPlayCarousel = dynamic<AutoPlayCarouselProps<(typeof sliders)[number]>>(() => import(\"@\/components\/ngr-ui\/AutoPlayCarousel\"), {\r\n  ssr: false,\r\n});\r\n\r\nexport default function AutoPlayCarouselWrapper() {\r\n  return (\r\n    <AutoPlayCarousel\r\n      slides={sliders}\r\n      showIndicator\r\n      renderSlide={({ slide }) => (\r\n        <img\r\n          src={slide.src}\r\n          alt={slide.alt}\r\n          className=\"rounded-lg size-full object-cover transition-all duration-500 ease-in-out group-hover:scale-105\"\r\n        \/>\r\n      )}\r\n    \/>\r\n  );\r\n}\r\n"
    }
  ]
}
